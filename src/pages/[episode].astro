---
import { getEntry } from 'astro:content';
import { db, eq, Episode as DbEpisode, HostOrGuest, Person } from 'astro:db';

import { Schema } from 'astro-seo-schema';

import FormattedDate from '../components/FormattedDate';
import CreatorsAndGuests from '../components/episode/CreatorsAndGuests.astro';
import PlayButton from '../components/player/PlayButton';
import FullPlayButton from '../components/FullPlayButton';
import UFOIllustration from '../components/illustrations/UFOIllustration.astro';
import Layout from '../layouts/Layout.astro';
import { getAllEpisodes, getShowInfo } from '../lib/rss';

const show = await getShowInfo();

export async function getStaticPaths() {
  const allEpisodes = await getAllEpisodes();

  return allEpisodes.flatMap((episode) => {
    return [
      {
        params: { episode: episode.episodeNumber },
        props: { episode }
      },
      {
        params: { episode: episode.episodeSlug },
        props: { episode }
      }
    ];
  });
}

const { episode } = Astro.props;

let Transcript;

if (episode.episodeNumber && episode.episodeNumber !== 'Bonus') {
  Transcript = await getEntry('transcripts', episode.episodeNumber);
  if (Transcript) {
    const { Content } = await Transcript.render();
    Transcript = Content;
  }
}

const dbEpisode = await db
  .select()
  .from(DbEpisode)
  .where(eq(DbEpisode.episodeSlug, episode.episodeSlug));

const hostsAndGuests = await db
  .select({
    id: Person.id,
    img: Person.img,
    isHost: HostOrGuest.isHost,
    name: Person.name
  })
  .from(HostOrGuest)
  .innerJoin(DbEpisode, eq(HostOrGuest.episodeSlug, DbEpisode.episodeSlug))
  .innerJoin(Person, eq(HostOrGuest.personId, Person.id))
  .where(eq(DbEpisode.episodeSlug, episode.episodeSlug));

const title = `${episode.title} - ${show.title} - Episode ${episode.episodeNumber}`;
---

<Layout
  description={episode.description}
  imageUrl={episode.episodeImage}
  title={title}
>
  <Schema
    slot="head"
    item={{
      '@context': 'https://schema.org',
      '@type': 'PodcastEpisode',
      name: episode.title,
      datePublished: new Date(episode.published).toISOString(),
      description: episode.description,
      episodeNumber: episode.episodeNumber
    }}
  />

  <div class="relative z-10 px-8 lg:px-18">
    <div class="flex">
      <div class="mr-11 mt-4 hidden lg:block">
        <PlayButton client:load episode={episode} />
      </div>

      <div>
        <FormattedDate date={new Date(episode.published)} />

        <h1
          class="mb-4 text-2xl font-bold text-light-text-heading lg:mb-6 lg:text-5xl dark:text-white"
        >
          {episode.episodeNumber}: {episode.title}
        </h1>

        <p class="mb-8 lg:mb-12">
          {episode.description}
        </p>

        <div class="mb-8 block lg:hidden">
          <FullPlayButton client:load episode={episode} />
        </div>

        {
          hostsAndGuests?.length ? (
            <CreatorsAndGuests hostsAndGuests={hostsAndGuests} />
          ) : undefined
        }

        <h3
          class="mb-6 text-3xl font-bold text-light-text-heading dark:text-white"
        >
          Show Notes
        </h3>

        <div
          class="prose prose-neutral mb-5 dark:prose-invert [&>h2:nth-of-type(3n)]:before:bg-violet-200 [&>h2:nth-of-type(3n+2)]:before:bg-indigo-200 [&>h2]:mt-12 [&>h2]:flex [&>h2]:items-center [&>h2]:font-mono [&>h2]:text-sm [&>h2]:font-medium [&>h2]:leading-7 [&>h2]:text-slate-900 [&>h2]:before:mr-3 [&>h2]:before:h-3 [&>h2]:before:w-1.5 [&>h2]:before:rounded-r-full [&>h2]:before:bg-cyan-200 [&>ul]:mt-6 [&>ul]:pl-5"
        >
          <Fragment set:html={episode.content} />
        </div>

        <h3 class="section-heading-underlined mb-8 mt-16">
          Episode Transcript
        </h3>

        {
          Transcript ? (
            <article class="prose prose-neutral dark:prose-invert">
              <Transcript />
            </article>
          ) : (
            <div class="flex flex-col items-center">
              <div class="h-auto w-full max-w-80">
                <UFOIllustration />
              </div>

              <p class="py-10 text-lg font-bold text-light-text-heading dark:text-white">
                No transcript available for this episode.
              </p>
            </div>
          )
        }
      </div>
    </div>
  </div>
</Layout>
